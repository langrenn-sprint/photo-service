openapi: 3.0.3
info:
  title: Photo service
  description: The photo service let you administrate the main domain objects photo, startlist and racelist
  version: "1.0"
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
  - name: contestant
    description: contestant in photo operations
  - name: photo
    description: photo operations
  - name: raceclass
    description: raceclass operations
  - name: competition-format
    description: competition format operations
paths:
  /video_events:
    get:
      description: Get a list of video_events
      requestBody:
        eventId:
          description: The event id
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VideoEvent"
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VideoEventsCollection"
    post:
      tags:
        - video_events
      security:
        - bearerAuth: []
      description: Import new video_events
      requestBody:
        eventId:
          description: The event id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VideoEvent"
        queueName:
          description: The queue name
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VideoEvent"
        description: Video events will be imported from the service bus queue
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VideoEvent"
      responses:
        201:
          description: Created


  /photos:
    post:
      tags:
        - photo
      security:
        - bearerAuth: []
      description: Add a new photo
      requestBody:
        description: The new photo to be created
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Photo"
      responses:
        201:
          description: Created
    get:
      parameters:
        - name: gId
          in: path
          description: google photo id (FK)
          required: false
          schema:
            type: string
            format: uuid
        - name: limit
          in: path
          description: limit number of results, starred photos first
          required: false
          schema:
            type: integer
            format: uuid
        - name: raceclass
          in: path
          description: raceclass (FK)
          required: false
          schema:
            type: string
            format: uuid
      tags:
        - photo
      description: Get a list of photos
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhotoCollection"
  /photos/{photoId}:
    parameters:
      - name: photoId
        in: path
        description: photo id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - photo
      description: Get a unique photo
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Photo"
    put:
      tags:
        - photo
      security:
        - bearerAuth: []
      description: Update an photo
      responses:
        204:
          description: No content
    delete:
      tags:
        - photo
      security:
        - bearerAuth: []
      description: Delete an photo
      responses:
        204:
          description: No content
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
