[project]
name = "photo-service"
version = "0.1.0"
description = "An API for admin of sporting photos"
readme = "README.md"
requires-python = ">=3.11.9"
license = "Apache-2.0"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
]
authors = [
    { name = "Stig B. Dørmænen", email = "stigbd@gmail.com" },
    { name = "Heming Harnæs", email = "heming.harnaes@gmail.com" },
]
dependencies = [
    "PyJWT>=2.1.0",
    "aiodns>=3.0.0",
    "aiohttp>=3.7.2",
    "aiohttp-middlewares>=2.1.0",
    "certifi>=2024.12.14",
    "dataclasses-json>=0.6.3",
    "gunicorn>=23.0.0",
    "marshmallow>=3.13.0",
    "motor>=3.3.2",
    "multidict>=6.0.1",
    "python-dotenv>=1.0.0",
]
[project.urls]
Homepage = "https://github.com/langrenn-sprint/photo-service"
Repository = "https://github.com/langrenn-sprint/photo-service"

[tool.uv]
dev-dependencies = [
    "Pygments>=2.10.0",
    "aiohttp-devtools>=1.0.post0",
    "aioresponses>=0.7.2",
    "codecov>=2.1.10",
    "coverage>=7.1.0",
    "docker>=7.0.0",
    "pytest>=8.3.4",
    "pytest-aiohttp>=1.0.4",
    "pytest-asyncio>=0.25.0",
    "pytest-cov>=6.0.0",
    "pytest-docker>=3.1.1",
    "pytest-mock>=3.8.2",
    "requests>=2.25.1",
    "types-requests>=2.31.0.20231231",
    "types-urllib3>=1.26.25.14",
    "pip-audit>=2.7.3",
    "ruff>=0.8.4",
    "poethepoet>=0.32.0",
    "deptry>=0.21.2",
    "pyright>=1.1.391",
    "pytest-env>=1.1.5",
]

[tool.ruff.lint]
select = ["ALL"]
# and then manually ignore annoying ones:
ignore = [
    "ANN401",
    "BLE001",
    "C901",
    "COM812",
    "E501",
    "F401",
    "G004",
    "ISC001",
    "LOG015",
    "PLR0912",
    "PLR2004",
    "SIM117",
    "T201",
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["ALL"]
#     # at least this three should be fine in tests:
#     "S101",     # asserts allowed in tests...
#     "ANN401",   # Any should be allowed
#     "ARG001",   # Unused function args -> fixtures nevertheless are functionally relevant...
#     "PLR0913",
#     "PTH123",   # Don't care about paths in tests
#     "ASYNC230", # Don't care about async in tests
#     "ERA001",   # Don't care about commented-out code in tests
#     "TD002",    # Don't care about missing author
#     "TD003",    # Don't care about missing issue links in tests
#     "FIX002",   # Don't care about TODOs in tests
#     "PLR0911",  # Don't care about too many return statements in tests
#     "PLR0912",  # Don't care about too many branches in tests
#     "PLR0915",  # Don't care about too many statements in tests
#     "FBT003",   # Don't care about boolean positional value in tests
#     "N802",     # Don't care about function name caseing in tests
#     "N806",     # Don't care about variable name caseing in tests
#     "PLC2401",  # Don't care about non-ascii characters in tests
#     "PLR2004",  # Don't care about magic value in tests
#     "PGH003",   # Don't care specific rule codes in tests


[tool.ruff.lint.isort]
# so it knows to group first-party stuff last
known-first-party = ["photo_service"]

[tool.ruff.lint.pydocstyle]
# Use Google-style docstrings.
convention = "google"

[tool.pyright]
venvPath = "." # rye installs the venv in the current dir
venv = ".venv" # in a folder called `.venv`

[tool.deptry]
ignore_notebooks = true
known_first_party = ["photo_service"]

[tool.deptry.per_rule_ignores]
DEP002 = ["aiodns", "certifi", "PyJWT"]

[tool.coverage.paths]
source = ["photo_service", "*/site-packages"]

[tool.coverage.run]
branch = false
omit = ["*gunicorn_config.py", "*db_utils.py"]
source = ["photo_service"]

[tool.coverage.report]
fail_under = 75
show_missing = true


[tool.pytest.ini_options]
env = [
    "CONFIG=test",
    "JWT_SECRET=secret",
    "ADMIN_USERNAME=admin",
    "ADMIN_PASSWORD=password",
    "JWT_EXP_DELTA_SECONDS=60",
    "DB_NAME=users_test",
    "DB_USER=admin",
    "DB_PASSWORD=admin",
    "LOGGING_LEVEL=INFO",
    "PHOTOS_HOST_SERVER=localhost",
    "PHOTOS_HOST_PORT=8092",
    "USERS_HOST_SERVER=localhost",
    "USERS_HOST_PORT=8086",
]

asyncio_mode = "auto"
markers = [
    "unit: marks tests as unit (fast)",
    "integration: marks tests as integration (slower)",
    "contract: marks test as contract (slow)",
]

[tool.poe.tasks]
format = { cmd = "uv run ruff format" }
lint = { cmd = "uv run ruff check --fix" }
pyright = { cmd = "uv run pyright" }
check_deps = { cmd = "uv run deptry ." }
audit = { cmd = "uv run pip-audit" }
unit_test = { cmd = "uv run pytest -m unit", env = { "CONFIG" = "test" } }
integration_test = { cmd = "uv run pytest -m integration -s --cov --cov-report=term-missing --cov-report=html:.htmlcov", env = { "CONFIG" = "test" } }
contract_test = { cmd = "uv run pytest -m contract -s" }
release = { sequence = [
    "lint",
    "pyright",
    "check_deps",
    "audit",
    "unit_test",
    "integration_test",
    "contract_test",
] }